import Foundation
import Supabase

actor SupabaseUploader {
    static let shared = SupabaseUploader()

    private let client: SupabaseClient?
    private let bucket: String?

    init() {
        let environment = ProcessInfo.processInfo.environment
        if
            let urlString = environment["SUPABASE_URL"],
            let url = URL(string: urlString),
            let anonKey = environment["SUPABASE_ANON_KEY"],
            let bucket = environment["SUPABASE_BUCKET"]
        {
            self.client = SupabaseClient(supabaseURL: url, supabaseKey: anonKey)
            self.bucket = bucket
            print("‚òÅÔ∏è SupabaseUploader: –æ–±–ª–∞—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ (bucket: \(bucket))")
        } else {
            self.client = nil
            self.bucket = nil
            print("‚ö†Ô∏è SupabaseUploader: –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –∑–∞–¥–∞–Ω—ã, –∑–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞")
        }
    }

    func uploadMix(at fileURL: URL, baseName: String) async throws {
        guard let client, let bucket else {
            print("üì¥ SupabaseUploader: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É \(fileURL.lastPathComponent)")
            return
        }

        let data = try Data(contentsOf: fileURL)
        let path = "mixes/\(baseName).m4a"
        print("‚òÅÔ∏è SupabaseUploader: –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É \(path)")

        do {
            let options = FileOptions(cacheControl: nil, contentType: "audio/mp4", upsert: true)
            try await client.storage.from(bucket).upload(
                path: path,
                data: data,
                fileOptions: options
            )
            print("‚úÖ SupabaseUploader: –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ \(path)")
        } catch {
            print("‚ùå SupabaseUploader: –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ \(path): \(error.localizedDescription)")
            throw error
        }
    }
}
