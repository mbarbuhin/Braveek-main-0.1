import Foundation

/// –£–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ–º–∏ –ø–∞–ø–∫–∞–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, —á—Ç–æ–±—ã —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –±—ã–ª–∞ –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω–æ–π.
@available(macOS 13.0, *)
struct AppPaths {
    static let shared = AppPaths()

    /// –ö–æ—Ä–Ω–µ–≤–∞—è –ø–∞–ø–∫–∞ –≤ Application Support: `~/Library/Application Support/AutoMeetingRecorder`.
    let rootDirectory: URL

    /// –ü–æ–¥–ø–∞–ø–∫–∞ –¥–ª—è –∞—É–¥–∏–æ–∑–∞–ø–∏—Å–µ–π: `.../Recordings`.
    let recordingsDirectory: URL

    private init() {
        let fileManager = FileManager.default
        let applicationSupportURL = fileManager.urls(for: .applicationSupportDirectory, in: .userDomainMask)[0]
        rootDirectory = applicationSupportURL.appendingPathComponent("AutoMeetingRecorder", isDirectory: true)
        recordingsDirectory = rootDirectory.appendingPathComponent("Recordings", isDirectory: true)

        createDirectoryIfNeeded(rootDirectory)
        createDirectoryIfNeeded(recordingsDirectory)
    }

    private func createDirectoryIfNeeded(_ url: URL) {
        let fileManager = FileManager.default
        if !fileManager.fileExists(atPath: url.path) {
            do {
                try fileManager.createDirectory(at: url, withIntermediateDirectories: true)
                print("üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: \(url.path)")
            } catch {
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É \(url.path): \(error.localizedDescription)")
            }
        }
    }
}
