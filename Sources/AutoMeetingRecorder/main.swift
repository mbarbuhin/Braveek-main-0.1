import Foundation
import AVFoundation
import ScreenCaptureKit

print("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó")
print("‚ïë   üéôÔ∏è  Auto Meeting Recorder –¥–ª—è macOS M4         ‚ïë")
print("‚ïë   –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–ø–∏—Å—å –≤—Å—Ç—Ä–µ—á                    ‚ïë")
print("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n")

guard #available(macOS 13.0, *) else {
    print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è macOS 13.0 –∏–ª–∏ –Ω–æ–≤–µ–µ")
    exit(1)
}

@available(macOS 13.0, *)
func checkPermissions() async -> Bool {
    print("üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π...\n")
    
    // –ú–∏–∫—Ä–æ—Ñ–æ–Ω
    print("1Ô∏è‚É£  –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞...")
    let micStatus = AVCaptureDevice.authorizationStatus(for: .audio)
    
    switch micStatus {
    case .authorized:
        print("   ‚úÖ –ú–∏–∫—Ä–æ—Ñ–æ–Ω: OK")
    case .notDetermined:
        print("   ‚è≥ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø...")
        let granted = await AVCaptureDevice.requestAccess(for: .audio)
        if !granted {
            print("   ‚ùå –î–æ—Å—Ç—É–ø –æ—Ç–∫–ª–æ–Ω—ë–Ω")
            return false
        }
        print("   ‚úÖ –ú–∏–∫—Ä–æ—Ñ–æ–Ω: OK")
    case .denied, .restricted:
        print("   ‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É")
        print("   üí° –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å ‚Üí –ú–∏–∫—Ä–æ—Ñ–æ–Ω")
        return false
    @unknown default:
        return false
    }
    
    // Screen Recording
    print("\n2Ô∏è‚É£  –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–∏—Å–∏ —ç–∫—Ä–∞–Ω–∞ (–¥–ª—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∑–≤—É–∫–∞)...")
    do {
        _ = try await SCShareableContent.excludingDesktopWindows(false, onScreenWindowsOnly: false)
        print("   ‚úÖ –ó–∞–ø–∏—Å—å —ç–∫—Ä–∞–Ω–∞: OK")
        return true
    } catch {
        print("   ‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞–ø–∏—Å–∏ —ç–∫—Ä–∞–Ω–∞")
        print("\nüìã –û—Ç–∫—Ä–æ–π—Ç–µ:")
        print("   –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å")
        print("   ‚Üí –ó–∞–ø–∏—Å—å —ç–∫—Ä–∞–Ω–∞ ‚Üí –î–æ–±–∞–≤—å—Ç–µ Terminal\n")
        return false
    }
}

@available(macOS 13.0, *)
final class RecordingManager {
    let recorder = DualAudioRecorder()
    let monitor = SystemMicrophoneMonitor()

    // –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    private(set) var isCurrentlyRecording = false
    private var micIsActiveNow = false

    // –ê–Ω—Ç–∏–¥—Ä–µ–±–µ–∑–≥: –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
    private var pendingStartTask: Task<Void, Never>?
    private var pendingStopTask: Task<Void, Never>?

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω—Ç–∏–¥—Ä–µ–±–µ–∑–≥–∞
    private let startDebounceMs: UInt64 = 500   // —É—Å—Ç–æ–π—á–∏–≤—ã–π TRUE 0.5s
    private let stopDebounceMs:  UInt64 = 3000  // —É—Å—Ç–æ–π—á–∏–≤—ã–π FALSE 3s

    func setup() {
        monitor.onMicrophoneStateChanged = { [weak self] isActive in
            self?.handleMicStateChange(isActive)
        }
        try? monitor.start()
    }

    // MARK: - –ê–≤—Ç–æ-–ª–æ–≥–∏–∫–∞

    private func handleMicStateChange(_ isActive: Bool) {
        micIsActiveNow = isActive

        if isActive {
            print("üîî [AUTO] mic=TRUE ‚Üí arming start in \(startDebounceMs)ms")
            // –æ—Ç–º–µ–Ω—è–µ–º –æ–∂–∏–¥–∞–µ–º—ã–π —Å—Ç–æ–ø
            pendingStopTask?.cancel(); pendingStopTask = nil

            // –µ—Å–ª–∏ —É–∂–µ –ø–∏—à–µ–º ‚Äî –≤—ã—Ö–æ–¥–∏–º
            guard !isCurrentlyRecording else { return }

            // –¥–µ–±–∞—É–Ω—Å–∏–º —Å—Ç–∞—Ä—Ç
            pendingStartTask?.cancel()
            pendingStartTask = Task.detached { [weak self] in
                guard let self = self else { return }
                try? await Task.sleep(nanoseconds: self.startDebounceMs * 1_000_000)
                guard !Task.isCancelled else { return }
                guard self.micIsActiveNow, !self.isCurrentlyRecording else { return }
                await self.startRecordingAuto()
            }

        } else {
            print("üîî [AUTO] mic=FALSE ‚Üí schedule stop in \(stopDebounceMs)ms")
            // –æ—Ç–º–µ–Ω—è–µ–º –æ–∂–∏–¥–∞–µ–º—ã–π —Å—Ç–∞—Ä—Ç
            pendingStartTask?.cancel(); pendingStartTask = nil

            // –µ—Å–ª–∏ –Ω–µ –ø–∏—à–µ–º ‚Äî –Ω–∏—á–µ–≥–æ
            guard isCurrentlyRecording else { return }

            // –¥–µ–±–∞—É–Ω—Å–∏–º —Å—Ç–æ–ø
            pendingStopTask?.cancel()
            pendingStopTask = Task.detached { [weak self] in
                guard let self = self else { return }
                try? await Task.sleep(nanoseconds: self.stopDebounceMs * 1_000_000)
                guard !Task.isCancelled else { return }
                guard !self.micIsActiveNow, self.isCurrentlyRecording else { return }
                self.stopRecordingAuto()
            }
        }
    }

    private func startRecordingAuto() async {
        print("üé§ [AUTO] start requested")
        do {
            try await recorder.startRecording()
            isCurrentlyRecording = true
            print("‚úÖ [AUTO] started")
        } catch {
            print("‚ùå [AUTO] start error: \(error.localizedDescription)")
        }
    }

    private func stopRecordingAuto() {
        print("‚èπÔ∏è  [AUTO] stop requested")
        recorder.stopRecording()
        isCurrentlyRecording = false
        print("‚úÖ [AUTO] stopped")
    }

    // MARK: - –†—É—á–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ

    func startManually() {
        guard !isCurrentlyRecording else {
            print("‚ö†Ô∏è  –ó–∞–ø–∏—Å—å —É–∂–µ –∏–¥—ë—Ç")
            return
        }
        pendingStopTask?.cancel(); pendingStopTask = nil
        Task.detached { [weak self] in
            guard let self = self else { return }
            do {
                try await self.recorder.startRecording()
                self.isCurrentlyRecording = true
            } catch {
                print("‚ùå –û—à–∏–±–∫–∞: \(error.localizedDescription)")
            }
        }
    }

    func stopManually() {
        guard isCurrentlyRecording else {
            print("‚ö†Ô∏è  –ó–∞–ø–∏—Å—å –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞")
            return
        }
        pendingStartTask?.cancel(); pendingStartTask = nil
        recorder.stopRecording()
        isCurrentlyRecording = false
    }
}

@available(macOS 13.0, *)
func main() async {
    let hasPermissions = await checkPermissions()
    guard hasPermissions else {
        print("\n‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π")
        exit(1)
    }
    
    print("\n" + String(repeating: "‚îÄ", count: 52))
    print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞!\n")
    
    let manager = RecordingManager()
    manager.setup()
    
    print("üìù –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç:")
    print("   1. –ó–∞–π–¥–∏—Ç–µ –≤ Safari –Ω–∞ –≤—Å—Ç—Ä–µ—á—É")
    print("   2. –ù–∞—á–Ω–∏—Ç–µ –≥–æ–≤–æ—Ä–∏—Ç—å ‚Üí –∑–∞–ø–∏—Å—å –Ω–∞—á–Ω—ë—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
    print("   3. –ü–æ—Å–ª–µ 2 —Å–µ–∫—É–Ω–¥ —Ç–∏—à–∏–Ω—ã ‚Üí –∑–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è")
    print("   4. –ü–æ—Å–ª–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–æ—Ä–æ–∂–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –ø–æ –ø–∞–ø–∫–∞–º –∏ —Å–≤–æ–¥—è—Ç—Å—è –≤ M4A")
    print("      (mix_<timestamp>.m4a –≤ –ø–∞–ø–∫–µ Recordings/Mixes)")

    let paths = AppPaths.shared
    print("\nüìÇ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–æ–≤:")
    print("   –ö–æ—Ä–Ω–µ–≤–∞—è –ø–∞–ø–∫–∞: \(paths.rootDirectory.path)")
    print("   –ë–∞–∑–∞: \(paths.recordingsDirectory.path)")
    print("   üé§ –ú–∏–∫—Ä–æ—Ñ–æ–Ω: \(paths.microphoneRecordingsDirectory.path)")
    print("   üíª –°–∏—Å—Ç–µ–º–∞: \(paths.systemRecordingsDirectory.path)")
    print("   üéß –ú–∏–∫—Å—ã: \(paths.mixedRecordingsDirectory.path)")
    print("   –ü—Ä–∏–º–µ—Ä –≥–æ—Ç–æ–≤–æ–≥–æ –º–∏–∫—Å–∞: mix_YYYY-MM-DDTHH-MM-SS.m4a\n")
    
    print("üéÆ –ö–æ–º–∞–Ω–¥—ã:")
    print("   [Enter] - –ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å –≤—Ä—É—á–Ω—É—é")
    print("   [S] - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å")
    print("   [Q] - –í—ã—Ö–æ–¥\n")
    print(String(repeating: "‚îÄ", count: 52))
    print("‚è≥ –ì–æ–≤–æ—Ä–∏—Ç–µ –≤ –º–∏–∫—Ä–æ—Ñ–æ–Ω –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å–∏...\n")
    
    // –í–≤–æ–¥ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ‚Äî –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º MainActor)
    Task.detached {
        while true {
            guard let input = readLine()?.lowercased() else { continue }
            switch input {
            case "", " ":
                manager.startManually()
            case "s", "stop":
                manager.stopManually()
            case "q", "quit":
                print("\nüëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ...")
                if manager.isCurrentlyRecording {
                    manager.stopManually()
                }
                exit(0)
            default:
                print("‚ö†Ô∏è  –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: Enter, S, Q")
            }
        }
    }
}

// Signal handler –¥–ª—è Ctrl+C
signal(SIGINT) { _ in
    print("\n\nüëã –í—ã—Ö–æ–¥...")
    exit(0)
}

Task {
    await main()
}

// –î–µ—Ä–∂–∏–º –ø—Ä–æ—Ü–µ—Å—Å –∂–∏–≤—ã–º
dispatchMain()

