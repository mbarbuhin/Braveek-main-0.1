import Foundation
import CoreAudio

class SystemMicrophoneMonitor {
    private var microphoneDeviceID: AudioDeviceID = 0
    private var isMonitoring = false
    private var lastState = false
    
    var onMicrophoneStateChanged: ((Bool) -> Void)?
    
    init() {
        print("üéß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞...")
    }
    
    func start() throws {
        guard !isMonitoring else {
            print("‚ö†Ô∏è  –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
        }
        
        // –ù–∞—Ö–æ–¥–∏–º –º–∏–∫—Ä–æ—Ñ–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        guard let deviceID = getDefaultInputDevice() else {
            throw NSError(domain: "SystemMicrophoneMonitor", code: 1,
                         userInfo: [NSLocalizedDescriptionKey: "–ù–µ –Ω–∞–π–¥–µ–Ω –º–∏–∫—Ä–æ—Ñ–æ–Ω"])
        }
        
        microphoneDeviceID = deviceID
        let deviceName = getDeviceName(deviceID)
        print("‚úÖ –ù–∞–π–¥–µ–Ω –º–∏–∫—Ä–æ—Ñ–æ–Ω: \(deviceName) (ID: \(deviceID))")
        
        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
        try setupPropertyListener()
        
        isMonitoring = true
        print("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω")
    }
    
    func stop() {
        guard isMonitoring else { return }
        
        var propertyAddress = AudioObjectPropertyAddress(
            mSelector: kAudioDevicePropertyDeviceIsRunningSomewhere,
            mScope: kAudioObjectPropertyScopeGlobal,
            mElement: kAudioObjectPropertyElementMain
        )
        
        AudioObjectRemovePropertyListener(
            microphoneDeviceID,
            &propertyAddress,
            audioDevicePropertyListenerProc,
            Unmanaged.passUnretained(self).toOpaque()
        )
        
        isMonitoring = false
        print("‚èπÔ∏è  –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    }
    
    // MARK: - Private
    
    private func setupPropertyListener() throws {
        var propertyAddress = AudioObjectPropertyAddress(
            mSelector: kAudioDevicePropertyDeviceIsRunningSomewhere,
            mScope: kAudioObjectPropertyScopeGlobal,
            mElement: kAudioObjectPropertyElementMain
        )
        
        let status = AudioObjectAddPropertyListener(
            microphoneDeviceID,
            &propertyAddress,
            audioDevicePropertyListenerProc,
            Unmanaged.passUnretained(self).toOpaque()
        )
        
        guard status == noErr else {
            throw NSError(domain: "SystemMicrophoneMonitor", code: Int(status),
                         userInfo: [NSLocalizedDescriptionKey: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è"])
        }
    }
    
    fileprivate func checkMicrophoneState() {
        let isActive = isDeviceActive(microphoneDeviceID)
        if isActive != lastState {
            lastState = isActive

            // 1) –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ –æ—Ç–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –Ω–∞–≤–µ—Ä—Ö (–±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ MainActor)
            Task {
                print("üîî [MON] mic=\(isActive ? "TRUE" : "FALSE") ‚Üí deliver callback")
                self.onMicrophoneStateChanged?(isActive)
            }

            // 2) –ö–æ—Å–º–µ—Ç–∏–∫–∞ ‚Äî –≤ —Ñ–æ–Ω–µ
            Task.detached { [weak self] in
                guard let self else { return }
                if isActive {
                    if let processName = self.getProcessUsingMicrophone() {
                        print("   –ü—Ä–æ—Ü–µ—Å—Å: \(processName)")
                    } else {
                        print("   –ü—Ä–æ—Ü–µ—Å—Å: (–Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω)")
                    }
                    print("üü¢ –ú–∏–∫—Ä–æ—Ñ–æ–Ω –ê–ö–¢–ò–í–ò–†–û–í–ê–ù (–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –µ–≥–æ)")
                } else {
                    print("‚ö™Ô∏è –ú–∏–∫—Ä–æ—Ñ–æ–Ω –î–ï–ê–ö–¢–ò–í–ò–†–û–í–ê–ù")
                }
            }
        }
    }
    
    private func getDefaultInputDevice() -> AudioDeviceID? {
        var deviceID = AudioDeviceID(0)
        var propertySize = UInt32(MemoryLayout<AudioDeviceID>.size)
        
        var propertyAddress = AudioObjectPropertyAddress(
            mSelector: kAudioHardwarePropertyDefaultInputDevice,
            mScope: kAudioObjectPropertyScopeGlobal,
            mElement: kAudioObjectPropertyElementMain
        )
        
        let status = AudioObjectGetPropertyData(
            AudioObjectID(kAudioObjectSystemObject),
            &propertyAddress,
            0,
            nil,
            &propertySize,
            &deviceID
        )
        
        guard status == noErr && deviceID != 0 else { return nil }
        return deviceID
    }
    
    private func getDeviceName(_ deviceID: AudioDeviceID) -> String {
        var propertySize = UInt32(MemoryLayout<CFString>.size)
        var propertyAddress = AudioObjectPropertyAddress(
            mSelector: kAudioDevicePropertyDeviceNameCFString,
            mScope: kAudioObjectPropertyScopeGlobal,
            mElement: kAudioObjectPropertyElementMain
        )
        
        var deviceName: CFString = "" as CFString
        
        guard AudioObjectGetPropertyData(
            deviceID,
            &propertyAddress,
            0,
            nil,
            &propertySize,
            &deviceName
        ) == noErr else { return "Unknown" }
        
        return deviceName as String
    }
    
    private func isDeviceActive(_ deviceID: AudioDeviceID) -> Bool {
        var isRunning = UInt32(0)
        var propertySize = UInt32(MemoryLayout<UInt32>.size)
        
        var propertyAddress = AudioObjectPropertyAddress(
            mSelector: kAudioDevicePropertyDeviceIsRunningSomewhere,
            mScope: kAudioObjectPropertyScopeGlobal,
            mElement: kAudioObjectPropertyElementMain
        )
        
        let status = AudioObjectGetPropertyData(
            deviceID,
            &propertyAddress,
            0,
            nil,
            &propertySize,
            &isRunning
        )
        
        return status == noErr && isRunning != 0
    }
    
    private func getProcessUsingMicrophone() -> String? {
        let task = Process()
        task.launchPath = "/usr/sbin/lsof"
        task.arguments = ["-c", "Safari", "-c", "zoom", "-c", "Discord", "-c", "Teams"]
        
        let pipe = Pipe()
        task.standardOutput = pipe
        task.standardError = pipe
        
        do {
            try task.run()
            task.waitUntilExit()
            
            let data = pipe.fileHandleForReading.readDataToEndOfFile()
            if let output = String(data: data, encoding: .utf8),
               output.contains("audio") {
                if output.contains("Safari") { return "Safari" }
                if output.contains("zoom") { return "Zoom" }
                if output.contains("Discord") { return "Discord" }
                if output.contains("Teams") { return "Teams" }
            }
        } catch {
            // –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
        }
        
        return nil
    }
    
    deinit {
        stop()
    }
}

// MARK: - C Callback

private func audioDevicePropertyListenerProc(
    inObjectID: AudioObjectID,
    inNumberAddresses: UInt32,
    inAddresses: UnsafePointer<AudioObjectPropertyAddress>,
    inClientData: UnsafeMutableRawPointer?
) -> OSStatus {
    guard let clientData = inClientData else { return noErr }
    
    let monitor = Unmanaged<SystemMicrophoneMonitor>
        .fromOpaque(clientData)
        .takeUnretainedValue()
    
    monitor.checkMicrophoneState()
    
    return noErr
}

